name: "FaceNet"
layer {
    	name: "data"
    	type: "HDF5Data"
    	top: "data"
     	top: "label"
    	hdf5_data_param {
		source: "data/BIO_ID_face/train_scaled_compiled_data_list.txt"
		batch_size: 50
		shuffle: true
	}
	include: { phase: TRAIN }
}
layer {
    	name: "data"
    	type: "HDF5Data"
    	top: "data"
     	top: "label"
    	hdf5_data_param {
		source: "data/BIO_ID_face/val_scaled_compiled_data_list.txt"
		batch_size: 40
		shuffle: true
	}
	include: { phase: TEST }
}
layer {
    	name: "conv1"
    	type: "Convolution"
	bottom: "data"
    	top: "conv1"
    	convolution_param {
		num_output: 20
		kernel_size: 11
		stride: 4
		pad: 2
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv2"
    	type: "Convolution"
	bottom: "pool1"
    	top: "conv2"
    	convolution_param {
		num_output: 40
		kernel_size: 7
		stride: 1
		pad: 3
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv3"
    	type: "Convolution"
	bottom: "pool2"
    	top: "conv3"
    	convolution_param {
		num_output: 50
		kernel_size: 5
		stride: 1
		pad: 2
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "pool3"
	type: "Pooling"
	bottom: "conv3"
	top: "pool3"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv4"
    	type: "Convolution"
	bottom: "pool3"
    	top: "conv4"
    	convolution_param {
		num_output: 100
		kernel_size: 5
		stride: 1
		pad: 2
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "pool4"
	type: "Pooling"
	bottom: "conv4"
	top: "pool4"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv5"
    	type: "Convolution"
	bottom: "pool4"
    	top: "conv5"
    	convolution_param {
		num_output: 200
		kernel_size: 5
		stride: 1
		pad: 2
		weight_filler {
			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}
layer {
	name: "pool5"
	type: "Pooling"
	bottom: "conv5"
	top: "pool5"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
	name: "fc1"
	type: "InnerProduct"
	bottom: "pool5"
	top: "fc1"
	inner_product_param {
   		num_output: 4000
 		weight_filler {
      			type: "xavier"
    		}
    		bias_filler {
      			type: "constant"
    		}
	}
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1"
  	type: "Dropout"
  	bottom: "fc1"
	top: "fc1"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2"
	type: "InnerProduct"
	bottom: "fc1"
	top: "fc2"
	inner_product_param {
		# 4 outputs for the 4 coordinates of left and right eyes 
   		num_output: 4
 		weight_filler {
      			type: "xavier"
    		}
    		bias_filler {
      			type: "constant"
    		}
	}
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "loss"
	type: "EuclideanLoss"
	bottom: "fc2"
	bottom: "label"
	top: "loss"
}


		
		


